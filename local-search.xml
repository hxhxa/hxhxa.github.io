<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo+GitHub搭建个人博客页面</title>
    <link href="/2021/01/12/hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/"/>
    <url>/2021/01/12/hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>回想到的一系列的过程，大概率是全了。不全的话，就是怪我的记忆力不太行</p> <a id="more"></a><h1 id="一、一堆乱七八糟的废话"><a href="#一、一堆乱七八糟的废话" class="headerlink" title="一、一堆乱七八糟的废话"></a>一、一堆乱七八糟的废话</h1><p>关于选择个人博客页面是因为很久之前就在B站上看过好多up主的视频，大多数的标题都是10分钟，20分钟，小白搞定个人博客。反正就是很吸引人，然后19年过年的时候，看到了一名华侨大学学长的个人博客，他当时发表的文章是学爬虫的时候做的笔记。那个时候也尝试弄过一段时间，没搞对，有着这样那样的很多的问题然后就放弃了。今年1月3号回的家，想起来这茬事。</p><p>期间还重装了几次电脑，我的电脑什么时候可以起飞，配环境啥的简直太恐怖了。装的时候很费事，搞清楚顺序还有其中的关系就很快了。</p><p>关于为什么要选择hexo+GitHub进行搭建，也没什么原因，就是因为网上都是这么说的，都说这么搞十分钟就搞好了</p><h1 id="二、安装环境配置等一系列准备"><a href="#二、安装环境配置等一系列准备" class="headerlink" title="二、安装环境配置等一系列准备"></a>二、安装环境配置等一系列准备</h1><p>1.git bash</p><p>2.node.js</p><p>3.hexo</p><h2 id="关于git-bash"><a href="#关于git-bash" class="headerlink" title="关于git bash"></a>关于git bash</h2><p>git bash其实就是相当于自带的cmd，可以直接在某个文件夹里Git Bash Here用了几次之后觉得非常方便。我是在这里下载的</p><p><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>用的Google浏览器，自带的翻译，看不懂就翻译，看不懂就翻译，大部分是看不懂的。</p><h2 id="关于Node-js"><a href="#关于Node-js" class="headerlink" title="关于Node.js"></a>关于Node.js</h2><p>NodeJS是hexo的环境，后续了解到下载这个环境是为了使用npm工具，后续好多都需要npm，瑞斯拜</p><p>下载地址<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>我下载的是LTS版本的</p><h2 id="关于hexo"><a href="#关于hexo" class="headerlink" title="关于hexo"></a>关于hexo</h2><p>终于到hexo了</p><p>首先，安装npm，win+R打开cmd一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>然后，等安装完之后。检查一下node，npm是否安装成功。继续cmd一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>接着，在要存博客的位置新建一个文件夹，我给自己的命名的是myblog，存在了D盘。打开D盘，右击myblog，选择Git Bash Here，会弹出一个类似cmd，但是是彩色的黑色框框。之后在里边输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init    <span class="hljs-comment">#初始化</span><br>npm install<br></code></pre></td></tr></table></figure><p>这样，就算全部安装完成了。</p><h1 id="三、打开最开始的hexo"><a href="#三、打开最开始的hexo" class="headerlink" title="三、打开最开始的hexo"></a>三、打开最开始的hexo</h1><p>上述完成之后，相当于最初的安装已经全部完成。接下来，就是网站的编译发布。还是myblog右击点开Git Bash Here</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>上述两步完成之后，在浏览器输入<a href="http://localhost:4000，便可以访问刚刚搞好的hexo首页，这个是原始的那种，不过还是很好看。">http://localhost:4000，便可以访问刚刚搞好的hexo首页，这个是原始的那种，不过还是很好看。</a></p><h1 id="四、部署到GitHub上"><a href="#四、部署到GitHub上" class="headerlink" title="四、部署到GitHub上"></a>四、部署到GitHub上</h1><h2 id="第一步。GitHub注册且建仓库"><a href="#第一步。GitHub注册且建仓库" class="headerlink" title="第一步。GitHub注册且建仓库"></a>第一步。GitHub注册且建仓库</h2><p>需要一个GitHub账号，然后新建一个库，名字就是自己GitHub的名+github.io(我也不知道为什么要这么命名，但是大家都是这么教的，好像是因为后续好通过域名进入)。</p><p>这一步的话，最好看一看自己能不能使用GitHub Pages。（我的就是不能用，全都弄完才发现打不开还以为是电脑坏了，后来才发现是因为我家的路由器的问题。）我是根据CSDN上的文章，修改了DNS服务器的地址，改成了114 .114.114.114,后续就可使用了。可以参照<a href="https://blog.csdn.net/wuufeii/article/details/108151697">https://blog.csdn.net/wuufeii/article/details/108151697</a></p><h2 id="第二步。和GitHub账户相关联"><a href="#第二步。和GitHub账户相关联" class="headerlink" title="第二步。和GitHub账户相关联"></a>第二步。和GitHub账户相关联</h2><p>之后，就是很重要的这个联网，我也不知道我为什么搞了很久。还是右击mylog，Git Bash Here。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的GitHub用户名&quot;</span> <br>git config --global user.email <span class="hljs-string">&quot;你GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>检验是否设置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --list<br></code></pre></td></tr></table></figure><p>之后改变站点的配置信息，打开myblog文件夹，找到 _config.yml文件，使用笔记本或者vscode等各种编译器打开修改最后的几行，保存退出。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">deploy:</span>  <br><span class="hljs-attr">type:</span> git  <br><span class="hljs-attr">repo:</span> <span class="hljs-attr">https:</span><span class="hljs-comment">//github.com/YourgithubName/YourgithubName.github.io.git  （这个网址是你GitHub仓库的地址，从GitHub中复制黏贴过去）</span><br><span class="hljs-attr">branch:</span> master<br></code></pre></td></tr></table></figure><h2 id="第三步。创建ssh"><a href="#第三步。创建ssh" class="headerlink" title="第三步。创建ssh"></a>第三步。创建ssh</h2><p>创建ssh的目的应该是为了方便后续将文件部署至git，更加方便快捷。</p><p>右击myblog使用Bash，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你自己的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>我后续都是一直回车的，他有设置用户名密码啥的，我主要是怕密码忘记，就全按默认回车了。有一个方框框的那种图形的显示，就是创建成功了。之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/.ssh<br>ls<br></code></pre></td></tr></table></figure><p>查看。如果显示is adirectory，就是说明文件存在了。根据文件路径找到.ssh，用记事本打开id_rsa.pub，将里边内容全部复制。</p><p>之后添加ssh key到GitHub，在git中打开个人用户那里的settings，里边有个SSH keys，点击new SSH keys。title随便写，key复制刚刚的内容。保存。</p><p>会有一段时间，隔一段时间再bash，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>出现问题的时候回复yes，之后有个hi，你自己的用户名，You’ve successfully authenticated, but GitHub does not provide shell access.就表示已经设置成功。</p><h2 id="第四步。安装git的扩展包，就是将hexo部署到git上"><a href="#第四步。安装git的扩展包，就是将hexo部署到git上" class="headerlink" title="第四步。安装git的扩展包，就是将hexo部署到git上"></a>第四步。安装git的扩展包，就是将hexo部署到git上</h2><p>继续Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>安装完成之后，继续bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>如果显示info deploy done：git说明就是部署成功了。如果不成功的话，会给你发邮件页面打不开，很显然邮件内容是全英文的o(TヘTo)。主题是Page build warning。</p><p>成功的话使用用户名.github.io便可以打开，和刚刚本地浏览的一样。</p><h1 id="五、更换域名"><a href="#五、更换域名" class="headerlink" title="五、更换域名"></a>五、更换域名</h1><p>如果想要自己的域名，可以购买一个，之后进行备案就可以用，在仓库里修改就可以使用了。（今天刚接到阿里小哥哥的电话，我可能快能用到自己掏钱买的域名辽。）</p><h1 id="六、关于怎么用"><a href="#六、关于怎么用" class="headerlink" title="六、关于怎么用"></a>六、关于怎么用</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>关于怎么用我也没有搞太对，还不了解，昨天更换了一个主题，在别人的git上down下来主题，之后修改一些图片之类的参数，改成自己更加喜欢的样式。我使用的是fluid。这个主题真的巨好用，里边很多样式我都巨喜欢。</p><p>改图片的话，我找了半天，是要在.deploy_git里边进行修改，如果直接改public里边的，一bash就没有了</p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>写文章使用的是Markdown语言，也是一种标记语言，不挺简单的，我下载了一个typora，更方便，这篇文章是我的首次尝试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章名称&quot;</span><br></code></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>关于每次修改完的更新，一般使用如下三个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<span class="hljs-comment">#清除缓存</span><br><br>hexo g<span class="hljs-comment">#编译</span><br><br>hexo d<span class="hljs-comment">#部署到git</span><br><br>hexo s<span class="hljs-comment">#在本地进行服务，可以使用http://localhost:4000/打开。</span><br></code></pre></td></tr></table></figure><p>大概就是这样，然后就是看看我这篇文章能否顺利上传。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/10/hello-world/"/>
    <url>/2021/01/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
